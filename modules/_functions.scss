// ============================================================
// 
//	HELPER FUNCTIONS
// 
// ============================================================
@function is-string($value) {
	@return type-of($value) == string;
}
@function is-list($value) {
	@return type-of($value) == list;
}
@function is-number($value) {
	@return type-of($value) == number;
}
@function is-bool($value) {
	@return type-of($value) == bool;
}
@function is-color($value) {
	@return type-of($value) == color;
}
@function is-null($value) {
	@return type-of($value) == null;
}
@function is-map($value) {
	@return type-of($value) == map;
}
@function is-function($value) {
	@return type-of($value) == function;
}
@function is-integer($value) {
	@return (type-of($value) == number) and (floor(abs($value)) == abs($value));
}
@function strip-units($value) {
	@return $value / ($value * 0 + 1);
}





// ============================================================
//
//	UNIT FUNCTIONS
//
// ============================================================
// returns an EM value. For example 24px becomes 1.5em
@function calc-em( $target, $context: $base-font-size) {
		@return strip-units(($target / $context)) + 0em;
}
// returns a percentage
@function calc-percent( $target, $context ) {
	@return percentage( $target / $context );
}
// return a rem value
@function calc-rem($target, $context: $base-font-size) {
	@return $target / $context * 1rem;
}
// returns an EM value that is a multiple of our defined base vertical unit. For
// example 3 becomes 1.125em
@function rhythm-em($lines: $baseline-unit, $font-size: $base-font-em, $silent: false) {
	@if is-integer($lines) == false and $silent == false {
		@warn unquote("#{$lines} + #{$not-integer-txt}");
	}
	@return (strip-units($lines) * strip-units($baseline-unit)) / (strip-units($font-size) * strip-units($base-font-size)) + 0em;
}
// returns a unitless number that is a multiple of our defined base vertical unit.
// example 3 becomes 1.125
@function rhythm-unitless($lines: $baseline-mltp, $font-size: $base-font-em, $silent: false) {
	@if is-integer($lines) == false and $silent == false {
		@warn unquote("#{$lines} + #{$not-integer-txt}");
	}
	@return ($lines * strip-units($baseline-unit)) / (strip-units($font-size) * strip-units($base-font-size));
}





// ============================================================
// 
//	GRID XY: flex grid base
//	
//	GRIDINATOR: display grid base
//	
// ============================================================
// calculateColumns
@function calculate-columns($interval) {
	@return 100% / $interval;
}
// spanWidth
@function span-width($one-column-width, $span-range) {
	@return $one-column-width * $span-range;
}





// ============================================================
// 
//	COLOR
//
// ============================================================
// color contrast
@function color-contrast($color) {
	$r: red($color);
	$g: green($color);
	$b: blue($color);
	$yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;
	@if ($yiq >= $color-contrasted-threshold) {
		@return $color-contrast-text-dark;
	} @else {
		@return $color-contrast-text-light;
	}
}