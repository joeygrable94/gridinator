// ============================================================
// 
//	INTERNAL VARIABLES
// 
// @author: Joey Grable
// @notes:
//	- It's Best to edit the config to adjust your settings
//	- Do not adjust the internal variables directly, unless
//	  making changes to the framework
// 
// ============================================================





//	DEFAULTS
// ============================================================
// Warning text for when an integer is not used in rhythm functions
$not-integer-txt: ' value breaks vertical rhythm. Use an integer (whole number) for $lines.';

// Create a handy variable for the 1em
$base-font-em: 1em;


//	SPACING HELPER VARS
// ============================================================
$list-sides: "top", "right", "bottom", "left";
$list-tb: "top", "bottom";
$list-lr: "left", "right";


// COLOR
// ============================================================
// lightness value that determines when the lightness of color changes
// from "dark" to "light". Acceptable values are between 0 and 255.
$color-contrasted-threshold: 150 !default;

// customize the light and dark text colors for use in color contrast function.
$color-contrast-text-dark: $black50 !default;
$color-contrast-text-light: $white !default;





//	GRID PROTOTYPE
// ============================================================
// list of all prototyping grid columns you want avaiable
$gridXY-prototype: 1, 2, 3, 4, 5, 10, 12, 20, 24;





//	GRID DEBUGGING
// ============================================================
// Creates base type baseline overlay and vertical unit overlay.
// To use on the body tag for example: body { @include debug-vertical-alignment(); } and add class va-debug to the body tag
@mixin debug-vertical-alignment(
	$opacity: 0.8,
	$vertical-unit: $baseline-unit,
	$type-baseline-mltp: $baseline-mltp,
	$type-size: $base-font-em
) {
	position: relative;
	&::before,
	&::after {
		content: "";
		position: absolute;
		top: 0;
		left: 0;
		bottom: 0;
		right: 0;
		width: 100%;
		display: none;
	}
	&::before {
		z-index: 10;
		background-image: -webkit-linear-gradient(rgba(233, 0, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);
				background-image: linear-gradient(rgba(233, 0, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);
		background-size: 100% (rhythm-unitless($type-baseline-mltp, $type-size) + 0rem);
	}
	&::after {
		z-index: 9;
		background-image: -webkit-linear-gradient(rgba(0, 233, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);
						background-image: linear-gradient(rgba(0, 233, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);
		background-size: 100% $vertical-unit;
	}
	&.va-debug::before,
	&.va-debug::after {
		display: block;
		pointer-events: none;
	}
}





//	BORDER RHYTHM
// ============================================================
// Creates a pixel width border top with padding that is a multiple of the base vertical grid unit.
@mixin rhythm-border-top($border-width: 1px, $lines: $baseline-mltp, $font-size: $base-font-em) {
	border-top-width: $border-width;
	padding-top: (($lines * strip-units($baseline-unit)) - strip-units($border-width)) / (strip-units($font-size) * strip-units($base-font-size)) + 0em;
}

// Creates a pixel width border bottom with padding that is a multiple of the base vertical grid unit.
@mixin rhythm-border-bottom($border-width: 1px, $lines: $baseline-mltp, $font-size: $base-font-em) {
	border-bottom-width: $border-width;
	padding-bottom: (($lines * strip-units($baseline-unit)) - strip-units($border-width)) / (strip-units($font-size) * strip-units($base-font-size)) + 0em;
}

// Creates a pixel width border with padding that is a multiple of the base vertical grid unit.
@mixin rhythm-border($border-width: 1px, $lines: $baseline-mltp, $font-size: $base-font-em) {
	border-width: $border-width;
	padding: (($lines * strip-units($baseline-unit)) - strip-units($border-width)) / (strip-units($font-size) * strip-units($base-font-size)) + 0em;
}





// 